{"version":3,"sources":["components/Employees.js","components/Search.js","utils/API.js","components/Directory.js","App.js","serviceWorker.js","index.js"],"names":["Employees","props","formattedDate","Moment","dob","format","className","style-prop","alt","firstName","src","icon","lastName","email","phone","Search","placeholder","name","type","onChange","event","startFilter","query","axios","get","Directory","state","employees","eeFiltered","search","isFiltered","sortOrder","filterEmployees","setState","target","value","filter","filtered","first","toLowerCase","includes","last","console","log","sortEmployees","a1","a2","sortedEmployees","sort","a","b","sortedeeFiltered","render","label","onClick","map","employee","picture","thumbnail","date","API","then","results","data","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c1d8e4f2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/Employees.css\";\nimport Moment from \"moment\";\n\nconst Employees = (props) => {\n\n// using Moment to format date from API response\n\n  let formattedDate = Moment(props.dob).format(\"LL\");\n\n// returning employee info with first and last name concatenated together + formatted date\n\n  return (\n    <tr className=\"tr\">\n      <td style-prop=\"margin-top: 10px\" >\n      <img  alt={props.firstName} src={props.icon} /></td>\n      <td>{props.firstName} {props.lastName}</td>\n      <td>{props.email}</td>\n      <td>{props.phone} </td>\n      <td>{formattedDate}</td>\n    </tr>\n  );\n};\n\nexport default Employees;\n","import React from \"react\";\nimport \"../styles/Search.css\";\n\nconst Search = (props) => {\n\n  return (\n    <div className=\"d-flex justify-content-center mx-auto\">\n      <form>\n        <input\n          placeholder=\"        Search by name\"\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control-lg search-font mx-auto\"\n          onChange={(event) => props.startFilter(event)}\n        />\n      </form>\n    </div>\n  );\n\n}\n\nexport default Search;","import axios from \"axios\";\r\n\r\nexport default {\r\n  getEmployees: function(query) {\r\n    return axios.get(\"https://randomuser.me/api/?results=250&nat=us&inc=name,email,phone,id,picture,dob\")\r\n     ;\r\n  }\r\n};\r\n\r\n","import React, { Component } from \"react\";\r\nimport Employees from \"./Employees\";\r\nimport Search from \"./Search\";\r\nimport API from \"../utils/API\";\r\nimport \"../styles/Directory.css\";\r\n\r\nclass Directory extends Component {\r\n\r\n  state = {\r\n    employees: [],\r\n    eeFiltered: [],\r\n    search: \"\",\r\n    isFiltered: false,\r\n    sortOrder: 1,\r\n  };\r\n\r\n  componentDidMount() {\r\n    API.getEmployees().then(results => {\r\n      this.setState({\r\n        employees: results.data.results,\r\n        eeFiltered: results.data.results,\r\n      });\r\n    });\r\n  }\r\n\r\n  // filter employees based on search term\r\n \r\n  filterEmployees = event => {\r\n    this.setState({ search: event.target.value }, () => {\r\n      let { employees, search } = this.state;\r\n      let eeFiltered = employees.filter(filtered => {\r\n        return (\r\n          filtered.name.first.toLowerCase().includes(search.toLowerCase()) ||\r\n          filtered.name.last.toLowerCase().includes(search.toLowerCase())  \r\n          )\r\n        })\r\n      console.log(eeFiltered)\r\n      this.setState({ eeFiltered })\r\n    });\r\n  };\r\n\r\n  sortEmployees = event => {\r\n\r\n// set sortOrder to determine if sort should be decending or acending, changes sign and direction each time invoked\r\n       let a1 = this.state.sortOrder;\r\n        let a2 = a1*-1;\r\n// sort objects based upon above criteria\r\n    let  sortedEmployees = this.state.employees.sort((a, b) => (a.name.first > b.name.first) ? a2: a1);\r\n    let  sortedeeFiltered  = this.state.eeFiltered.sort((a, b) => (a.name.first > b.name.first) ? a1: a2);\r\n    console.log(sortedeeFiltered)\r\n// update objects with new sort ordering \r\n    this.setState({\r\n      employees: sortedEmployees,\r\n      eeFiltered: sortedeeFiltered,\r\n      sortOrder: a2\r\n    })\r\n  }\r\n\r\n// render header and then table \r\n\r\n  render = () => {\r\n    return (\r\n      <div>\r\n        <div className=\"jumbotron\">\r\n        <br></br>\r\n          <h3 className=\"display-4\">Employee Directory</h3>\r\n          <br></br><br></br>\r\n\r\n{/* Search component which initiaties filter function  */}\r\n\r\n    <Search name=\"search\" startFilter={this.filterEmployees} label=\"Search\" />\r\n      \r\n{/* render table header - with event listener on employee name */}\r\n        </div>\r\n        <br></br><br></br><br></br><br></br>\r\n        <div className=\"container\">\r\n          <table className=\"table table-striped table-hover table-condensed\">\r\n            <thead className=\"thead\">\r\n              <tr>\r\n                <th>Photo </th>\r\n                <th onClick={(event) =>this.sortEmployees(event)}>Name \r\n                  <button className=\"navbar-toggler\" type=\"button\" >sort</button>\r\n                </th>\r\n                <th>Email</th>\r\n                <th>Phone</th>\r\n                <th>Birthdate </th>\r\n              </tr>\r\n            </thead>\r\n            <br></br> \r\n\r\n            <tbody>\r\n\r\n  {/* render employee information within table body based upon filter criteria */}\r\n                  {this.state.eeFiltered.map((employee) => (\r\n                    <Employees\r\n                      firstName={employee.name.first}\r\n                      lastName={employee.name.last}\r\n                      phone={employee.phone}\r\n                      email={employee.email}\r\n                      icon={employee.picture.thumbnail}\r\n                      dob={employee.dob.date}\r\n                    />\r\n                  ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Directory;\r\n","import React from \"react\";\nimport Directory from \"./components/Directory\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Directory />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\n// code from activity 19 and 20\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}